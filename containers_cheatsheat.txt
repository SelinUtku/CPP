Standard Template Library (STL) Containers:

Sequence Containers:

std::vector:
Dynamic array, resizable.
Access elements by index in O(1) time.
Efficient for random access.
push_back(), pop_back() for insertion and deletion at the end.

std::deque:
Double-ended queue.
Supports fast insertion and deletion at both ends.
Efficient for front and back operations.

std::list:
Doubly-linked list.
Efficient for insertion and deletion at any position.
No random access, traversal from start to end.
push_front(), push_back() for insertion at front and back.



Associative Containers:

std::set:
Collection of unique elements, sorted by keys.
Red-Black Tree implementation.
insert(), erase(), find() operations.

std::map:
Collection of key-value pairs.
Unique keys, sorted by keys.
insert(), erase(), find() operations based on keys.

std::unordered_set and std::unordered_map:
Hash table-based implementations.
Faster average access time but unordered.
insert(), erase(), find() operations.

Container Adaptors:

std::stack:
LIFO (Last In First Out) structure.
Uses std::deque or std::list as underlying implementation.
push(), pop(), top() operations.

std::queue:
FIFO (First In First Out) structure.
Uses std::deque or std::list as underlying implementation.
push(), pop(), front() operations.

std::priority_queue:
Queue where elements are ordered by priority.
Uses std::vector as default underlying implementation.
push(), pop(), top() operations.

